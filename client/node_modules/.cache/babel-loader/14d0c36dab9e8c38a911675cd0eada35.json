{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/Downloads/html5up-massively/crudapp(react and node js)/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      name: null,\n      idToDelete: null,\n      loading: true,\n      intervalIsSet: false,\n      idToUpdate: null,\n      nameToUpdate: null,\n      current: \"\"\n    };\n\n    this.getDataFromDB = () => {\n      fetch(\"http://localhost:5000/getData\").then(data => data.json()).then(res => {\n        this.setState({\n          data: res.data\n        });\n      }) //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({\n        err\n      }));\n    };\n\n    this.addCourse = name => {\n      // post method that uses our API to create new data\n      axios.post(\"http://localhost:5000/addData\", {\n        name: name\n      });\n    };\n\n    this.deleteCourse = id => {\n      console.log(id);\n      axios.post(\"http://localhost:5000/deleteData\", {\n        id: id\n      });\n    };\n\n    this.editCourse = (id, value) => {\n      axios.post(\"http://localhost:5000/updateData\", {\n        name: value,\n        id: id\n      });\n    };\n  }\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n    this.getDataFromDB();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //! Get method to use our backend API and fetch data from DB\n\n\n  render() {\n    let data = this.state.data;\n    let length = data.length;\n    const courseList = length <= 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \" Ther is no Course to show\") : data.map(data => {\n      return React.createElement(CourseList, {\n        deleteCourse: this.deleteCourse,\n        editCourse: this.editCourse,\n        name: data.name,\n        id: data._id,\n        key: data._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Add Course\"), React.createElement(CourseForm, {\n      current: this.state.current,\n      name: this.state.name,\n      ahmad: e => this.setState({\n        name: e.target.value\n      })\n      /* updateCourse={this.updateCourse} */\n      ,\n      addCourse: this.addCourse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, courseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmad/Downloads/html5up-massively/crudapp(react and node js)/client/src/App.js"],"names":["React","Component","axios","CourseForm","CourseList","App","state","data","name","idToDelete","loading","intervalIsSet","idToUpdate","nameToUpdate","current","getDataFromDB","fetch","then","json","res","setState","catch","err","addCourse","post","deleteCourse","id","console","log","editCourse","value","componentDidMount","setTimeout","interval","setInterval","render","length","courseList","map","_id","e","target"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    name: null,\n    idToDelete: null,\n    loading: true,\n    intervalIsSet: false,\n    idToUpdate: null,\n    nameToUpdate: null,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(data => data.json())\n      .then(res => {\n        this.setState({ data: res.data });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n\n  // Add Course\n  addCourse = name => {\n    // post method that uses our API to create new data\n    axios.post(\"http://localhost:5000/addData\", {\n      name: name\n    });\n  };\n\n\n\n  // delete Course\n  deleteCourse = (id) => {\n    console.log(id)\n    axios.post(\"http://localhost:5000/deleteData\", {\n      id: id\n    });\n  }\n\n  \n  //editCourse\n  editCourse = (id, value) => {\n\n    axios.post(\"http://localhost:5000/updateData\", {\n          name: value,\n          id: id\n        });\n  }\n\n  render() {\n    let { data } = this.state;\n    let length = data.length;\n\n    const courseList =\n      length <= 0 ? (\n        <p> Ther is no Course to show</p>\n      ) : (\n        data.map(data => {\n          return (\n            <CourseList\n              deleteCourse={this.deleteCourse}\n              editCourse={this.editCourse}\n              name={data.name}\n              id={data._id}\n              key={data._id}\n            />\n          );\n        })\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          name={this.state.name}\n          ahmad={e => this.setState({ name: e.target.value })}\n          /* updateCourse={this.updateCourse} */\n          addCourse={this.addCourse}\n        />\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}