{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      name: null,\n      idToDelete: null,\n      loading: true,\n      intervalIsSet: false,\n      idToUpdate: null,\n      nameToUpdate: null,\n      current: \"\"\n    };\n\n    this.getDataFromDB = () => {\n      fetch(\"http://localhost:5000/getData\").then(data => data.json()).then(res => {\n        this.setState({\n          data: res.data\n        });\n      }) //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({\n        err\n      }));\n    };\n\n    this.updateCourse = e => {\n      this.setState({\n        current: e.target.value\n      });\n    };\n\n    this.addCourse = name => {\n      // post method that uses our API to create new data\n      let currentId = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentId.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/addData\", {\n        id: idToBeAdded,\n        name: name\n      });\n    };\n\n    this.deleteFromDB = idToDelete => {\n      // Need to Delete the object according to ID\n      let objIdToDelete = null;\n      this.state.data.forEach(object => {\n        if (object.id = idToDelete) {\n          objIdToDelete = object.id;\n        }\n\n        console.log(objIdToDelete);\n      }); // call /deleteData to delete the object using axios\n\n      axios.delete(\"http://localhost:5000/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.deleteCourse = index => {\n      let courses = this.state.courses;\n      courses.splice(index, 1);\n      this.setState({\n        courses\n      });\n    };\n  }\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n    this.getDataFromDB();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //! Get method to use our backend API and fetch data from DB\n\n\n  /* //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n  render() {\n    let data = this.state.data;\n    let length = data.length;\n    const courseList = length <= 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \" Ther is no Course to show\") : data.map(data => {\n      return React.createElement(CourseList, {\n        details: data.name,\n        deleteCourse: this.deleteCourse,\n        courses: this.state.data,\n        editCourse: this.editCourse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Add Course\"), React.createElement(CourseForm, {\n      current: this.state.current,\n      name: this.state.name,\n      ahmad: e => this.setState({\n        name: e.target.value\n      })\n      /* updateCourse={this.updateCourse} */\n      ,\n      addCourse: this.addCourse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, courseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js"],"names":["React","Component","axios","Loader","CourseForm","CourseList","App","state","data","id","name","idToDelete","loading","intervalIsSet","idToUpdate","nameToUpdate","current","getDataFromDB","fetch","then","json","res","setState","catch","err","updateCourse","e","target","value","addCourse","currentId","map","idToBeAdded","includes","post","deleteFromDB","objIdToDelete","forEach","object","console","log","delete","deleteCourse","index","courses","splice","componentDidMount","setTimeout","interval","setInterval","render","length","courseList","editCourse"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    id: 0,\n    name: null,\n    idToDelete: null,\n    loading: true,\n    intervalIsSet: false,\n    idToUpdate: null,\n    nameToUpdate: null,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(data => data.json())\n      .then(res => {\n        this.setState({ data: res.data });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n  // Update Course\n  updateCourse = e => {\n    this.setState({\n      current: e.target.value\n    });\n  };\n\n  // Add Course\n  addCourse = name => {\n    // post method that uses our API to create new data\n    let currentId = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentId.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/addData\", {\n      id: idToBeAdded,\n      name: name\n    });\n  };\n\n  //! Delete method to remove existing DB info\n  deleteFromDB = idToDelete => {\n    // Need to Delete the object according to ID\n    let objIdToDelete = null;\n\n    this.state.data.forEach(object => {\n      if ((object.id = idToDelete)) {\n        objIdToDelete = object.id;\n      }\n      console.log(objIdToDelete);\n    });\n\n    // call /deleteData to delete the object using axios\n    axios.delete(\"http://localhost:5000/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  }\n\n  /* //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n\n  render() {\n    let { data } = this.state;\n    let length = data.length;\n\n    const courseList =\n      length <= 0 ? (\n        <p> Ther is no Course to show</p>\n      ) : (\n        data.map(data => {\n          return (\n            <CourseList\n              details={data.name}\n              deleteCourse={this.deleteCourse}\n              courses={this.state.data}\n              editCourse={this.editCourse}\n            />\n          );\n        })\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          name={this.state.name}\n          ahmad={e => this.setState({ name: e.target.value })}\n          /* updateCourse={this.updateCourse} */\n          addCourse={this.addCourse}\n        />\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}