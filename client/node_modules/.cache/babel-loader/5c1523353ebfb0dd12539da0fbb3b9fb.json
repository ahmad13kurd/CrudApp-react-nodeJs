{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      name: null,\n      idToDelete: null,\n      loading: true,\n      intervalIsSet: false,\n      idToUpdate: null,\n      nameToUpdate: null,\n      current: \"\"\n    };\n\n    this.getDataFromDB = () => {\n      fetch(\"http://localhost:5000/getData\").then(data => data.json()).then(res => {\n        this.setState({\n          data: res.data\n        });\n      }) //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({\n        err\n      }));\n    };\n\n    this.addCourse = name => {\n      // post method that uses our API to create new data\n      axios.post(\"http://localhost:5000/addData\", {\n        name: name\n      });\n    };\n\n    this.deleteCourse = index => {\n      let data = this.state.data;\n      data.splice(index, 1);\n      this.setState({\n        data\n      }); // call /deleteData to delete the object using axios\n\n      axios.delete(\"http://localhost:5000/deleteData\", {\n        data: data\n      });\n    };\n\n    this.editCourse = (id, value) => {\n      /*     let data = this.state.data;\n          let course = data[index];\n          course['name'] = value;\n          this.setState({\n            data\n          }) */\n      axios.post(\"http://localhost:5000/updateData\", {\n        name: value,\n        id: id\n      });\n    };\n  }\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n    this.getDataFromDB();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //! Get method to use our backend API and fetch data from DB\n\n\n  render() {\n    let data = this.state.data;\n    let length = data.length;\n    const courseList = length <= 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \" Ther is no Course to show\") : data.map((data, index) => {\n      return React.createElement(CourseList, {\n        details: data.name,\n        deleteCourse: this.deleteCourse,\n        courses: this.state.data,\n        editCourse: this.editCourse,\n        index: index,\n        name: data.name,\n        id: data._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Add Course\"), React.createElement(CourseForm, {\n      current: this.state.current,\n      name: this.state.name,\n      ahmad: e => this.setState({\n        name: e.target.value\n      })\n      /* updateCourse={this.updateCourse} */\n      ,\n      addCourse: this.addCourse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, courseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js"],"names":["React","Component","axios","Loader","CourseForm","CourseList","App","state","data","name","idToDelete","loading","intervalIsSet","idToUpdate","nameToUpdate","current","getDataFromDB","fetch","then","json","res","setState","catch","err","addCourse","post","deleteCourse","index","splice","delete","editCourse","id","value","componentDidMount","setTimeout","interval","setInterval","render","length","courseList","map","_id","e","target"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    name: null,\n    idToDelete: null,\n    loading: true,\n    intervalIsSet: false,\n    idToUpdate: null,\n    nameToUpdate: null,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(data => data.json())\n      .then(res => {\n        this.setState({ data: res.data });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n/*   // Update Course\n  updateCourse = e => {\n    this.setState({\n      current: e.target.value\n    });\n  }; */\n\n  // Add Course\n  addCourse = name => {\n    // post method that uses our API to create new data\n    axios.post(\"http://localhost:5000/addData\", {\n      name: name\n    });\n  };\n\n\n\n  // delete Course\n  deleteCourse = (index) => {\n    let data = this.state.data;\n    data.splice(index, 1);\n    this.setState({\n      data\n    });\n    // call /deleteData to delete the object using axios\n    axios.delete(\"http://localhost:5000/deleteData\", {\n      data: data\n      \n    });\n  }\n\n  //editCourse\n  //editCourse\n  editCourse = (id, value) => {\n/*     let data = this.state.data;\n    let course = data[index];\n    course['name'] = value;\n    this.setState({\n      data\n    }) */\n\n    axios.post(\"http://localhost:5000/updateData\", {\n          name: value,\n          id: id\n        });\n  }\n\n  render() {\n    let { data } = this.state;\n    let length = data.length;\n\n    const courseList =\n      length <= 0 ? (\n        <p> Ther is no Course to show</p>\n      ) : (\n        data.map((data,index) => {\n          return (\n            <CourseList\n              details={data.name}\n              deleteCourse={this.deleteCourse}\n              courses={this.state.data}\n              editCourse={this.editCourse}\n              index= {index} \n              name={data.name}\n              id={data._id}\n            />\n          );\n        })\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          name={this.state.name}\n          ahmad={e => this.setState({ name: e.target.value })}\n          /* updateCourse={this.updateCourse} */\n          addCourse={this.addCourse}\n        />\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}