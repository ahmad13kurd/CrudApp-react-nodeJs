{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      name: null,\n      loading: true,\n      intervalIsSet: false,\n      idToUpdate: null,\n      nameToUpdate: null,\n      current: \"\"\n    };\n\n    this.getDataFromDB = () => {\n      fetch(\"http://localhost:5000/getData\").then(data => data.json()).then(res => {\n        this.setState({\n          data: res.data\n        });\n      }) //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({\n        err\n      }));\n    };\n\n    this.addCourse = name => {\n      // post method that uses our API to create new data\n      let currentId = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentId.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/addData\", {\n        id: idToBeAdded,\n        name: name\n      });\n    };\n  }\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n    this.getDataFromDB();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //! Get method to use our backend API and fetch data from DB\n\n\n  /*   e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }; */\n\n  /*  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  } */\n\n  /*  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n  render() {\n    let data = this.state.data;\n    let length = data.length;\n    const courseList = length < 0 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \" Ther is no Course to show\") : data.map(data => {\n      return React.createElement(CourseList, {\n        details: this.state.name,\n        deleteCourse: this.deleteCourse,\n        courses: this.state.data,\n        editCourse: this.editCourse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Add Course\"), React.createElement(CourseForm, {\n      current: this.state.current,\n      name: this.state.name,\n      ahmad: e => this.setState({\n        name: e.target.value\n      })\n      /* updateCourse={this.updateCourse} */\n      ,\n      addCourse: this.addCourse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, courseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js"],"names":["React","Component","axios","Loader","CourseForm","CourseList","App","state","data","id","name","loading","intervalIsSet","idToUpdate","nameToUpdate","current","getDataFromDB","fetch","then","json","res","setState","catch","err","addCourse","currentId","map","idToBeAdded","includes","post","componentDidMount","setTimeout","interval","setInterval","render","length","courseList","deleteCourse","editCourse","e","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    id: 0,\n    name: null,\n    loading: true,\n    intervalIsSet: false,\n    idToUpdate: null,\n    nameToUpdate: null,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(data => data.json())\n      .then(res => {\n        this.setState({ data: res.data });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n  /*   // Update Course\n  updateCourse =(e)=>{\n    this.setState({\n      current: e.target.value\n    });\n  } */\n\n  // Add Course\n  addCourse = name => {\n    // post method that uses our API to create new data\n    let currentId = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentId.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/addData\", {\n      id: idToBeAdded,\n      name: name\n    });\n  };\n\n  /*   e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }; */\n\n  /*  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  } */\n\n  /*  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n\n  render() {\n    let { data } = this.state;\n    let length = data.length;\n\n    const courseList =\n      length < 0 ? (\n        <p> Ther is no Course to show</p>\n      )\n      :\n      (\n        data.map(data => {\n          return (\n            <CourseList\n              details={this.state.name}\n              deleteCourse={this.deleteCourse}\n              courses={this.state.data}\n              \n            editCourse={this.editCourse}\n            />\n          );\n        })\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          name= {this.state.name}\n          ahmad= {e=> this.setState({name: e.target.value})}\n          /* updateCourse={this.updateCourse} */ addCourse={this.addCourse}\n        />\n\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}