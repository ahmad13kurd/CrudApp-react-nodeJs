{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      courses: [],\n      loading: true,\n      intervalIsSet: false,\n      current: \"\"\n    };\n\n    this.getDataFromDB = () => {\n      fetch(\"http://localhost:5000/getData\").then(data => data.json()).then(res => {\n        this.setState({\n          data: res.data\n        });\n      }) //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({\n        err\n      }));\n    };\n\n    this.addCourse = course => {\n      //! post method that uses our API to create new data\n      axios.post(\"http://localhost:5000/addData\", {\n        course: course\n      });\n    };\n  }\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n    this.getDataFromDB();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //! Get method to use our backend API and fetch data from DB\n\n\n  /*   e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }; */\n\n  /*  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  } */\n\n  /*  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n  render() {\n    let courses = this.state.courses;\n    let length = courses.length;\n    const courseList = length < 0 ? courses.map(course => {\n      return React.createElement(CourseList, {\n        details: course\n        /* deleteCourse={this.deleteCourse} */\n        ,\n        courses: this.state.courses\n        /* key={index}\n        index={index}\n        editCourse={this.editCourse} */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \" Ther is no Course to show\");\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Add Course\"), React.createElement(CourseForm, {\n      current: this.state.current\n      /* updateCourse={this.updateCourse} */\n      ,\n      addCourse: this.addCourse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, courseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js"],"names":["React","Component","axios","Loader","CourseForm","CourseList","App","state","courses","loading","intervalIsSet","current","getDataFromDB","fetch","then","data","json","res","setState","catch","err","addCourse","course","post","componentDidMount","setTimeout","interval","setInterval","render","length","courseList","map"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAO,WAAP;;AAKA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BM,KAD0B,GAClB;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,OAAO,EAAE,IAFH;AAGNC,MAAAA,aAAa,EAAE,KAHT;AAINC,MAAAA,OAAO,EAAE;AAJH,KADkB;;AAAA,SAqB1BC,aArB0B,GAqBV,MAAM;AACpBC,MAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,GAAG,IAAI;AACX,aAAKC,QAAL,CAAc;AAAEH,UAAAA,IAAI,EAAEE,GAAG,CAACF;AAAZ,SAAd;AACD,OAJH,EAKE;AALF,OAMGI,KANH,CAMSC,GAAG,IAAI,KAAKF,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd,CANhB;AAOD,KA7ByB;;AAAA,SAuC1BC,SAvC0B,GAuCdC,MAAM,IAAI;AACpB;AAEEpB,MAAAA,KAAK,CAACqB,IAAN,CAAW,+BAAX,EAA4C;AAC1CD,QAAAA,MAAM,EAAEA;AADkC,OAA5C;AAGH,KA7CyB;AAAA;;AAQ1B;AACAE,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKP,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGA,SAAKG,aAAL;;AACA,QAAI,CAAC,KAAKL,KAAL,CAAWG,aAAhB,EAA+B;AAC7B,UAAIgB,QAAQ,GAAGC,WAAW,CAAC,KAAKf,aAAN,EAAqB,IAArB,CAA1B;AACA,WAAKM,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAEgB;AAAjB,OAAd;AACD;AACF,GAlByB,CAoB1B;;;AA4BA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;AAUAE,EAAAA,MAAM,GAAG;AAAA,QACDpB,OADC,GACW,KAAKD,KADhB,CACDC,OADC;AAEP,QAAIqB,MAAM,GAAGrB,OAAO,CAACqB,MAArB;AAEA,UAAMC,UAAU,GAAGD,MAAM,GAAG,CAAT,GACjBrB,OAAO,CAACuB,GAAR,CAAYT,MAAM,IAAI;AACpB,aACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAEA;AACT;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKf,KAAL,CAAWC;AACpB;;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD,KAXD,CADiB,GAcjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAdF;AAiBA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWI;AACpB;AAFF;AAEyC,MAAA,SAAS,EAAE,KAAKU,SAFzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKS,UAAL,CAPF,CADF;AAWD;;AA9GyB;;AAkH5B,eAAexB,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    courses: [],\n    loading: true,\n    intervalIsSet: false,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(data => data.json())\n      .then(res => {\n        this.setState({ data: res.data });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n  /*   // Update Course\n  updateCourse =(e)=>{\n    this.setState({\n      current: e.target.value\n    });\n  } */\n\n  // Add Course\n  addCourse = course => {\n    //! post method that uses our API to create new data\n\n      axios.post(\"http://localhost:5000/addData\", {\n        course: course\n      });\n  }\n\n\n  /*   e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }; */\n\n  /*  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  } */\n\n  /*  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n\n  render() {\n    let { courses } = this.state;\n    let length = courses.length;\n\n    const courseList = length < 0 ? (\n      courses.map(course => {\n        return (\n          <CourseList\n            details={course}\n            /* deleteCourse={this.deleteCourse} */\n            courses={this.state.courses}\n            /* key={index}\n            index={index}\n            editCourse={this.editCourse} */\n          />\n        );\n      })\n    ) : (\n      <p> Ther is no Course to show</p>\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          /* updateCourse={this.updateCourse} */ addCourse={this.addCourse}\n        />\n\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}