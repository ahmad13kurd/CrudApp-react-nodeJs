{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      courses: [],\n      id: 0,\n      name: null,\n      loading: true,\n      intervalIsSet: false,\n      idToUpdate: null,\n      messageToUpdate: null,\n      current: \"\"\n    };\n\n    this.getDataFromDB = () => {\n      fetch(\"http://localhost:5000/getData\").then(course => course.json()).then(res => {\n        this.setState({\n          course: res.course\n        });\n      }) //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({\n        err\n      }));\n    };\n\n    this.addCourse = course => {\n      // post method that uses our API to create new data\n      let currentId = this.state.courses.map(course => course.id);\n      let idToBeAdded = 0;\n\n      while (currentId.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/addData\", {\n        id: idToBeAdded,\n        course: course\n      });\n    };\n  }\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n    this.getDataFromDB();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } //! Get method to use our backend API and fetch data from DB\n\n\n  /*   e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }; */\n\n  /*  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  } */\n\n  /*  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n  render() {\n    let courses = this.state.courses;\n    let length = courses.length;\n    const courseList = courses.length < 0 ? courses.map(course => {\n      return React.createElement(CourseList, {\n        details: course.name\n        /* deleteCourse={this.deleteCourse} */\n        ,\n        courses: this.state.courses\n        /* key={index}\n        index={index}\n        editCourse={this.editCourse} */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \" Ther is no Course to show\");\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Add Course\"), React.createElement(CourseForm, {\n      current: this.state.current,\n      name: this.state.name,\n      setState: e => this.setState({\n        name: e.target.value\n      })\n      /* updateCourse={this.updateCourse} */\n      ,\n      addCourse: this.addCourse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, courseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ahmad/Downloads/html5up-massively/crudapp/client/src/App.js"],"names":["React","Component","axios","Loader","CourseForm","CourseList","App","state","courses","id","name","loading","intervalIsSet","idToUpdate","messageToUpdate","current","getDataFromDB","fetch","then","course","json","res","setState","catch","err","addCourse","currentId","map","idToBeAdded","includes","post","componentDidMount","setTimeout","interval","setInterval","render","length","courseList","e","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    courses: [],\n    id: 0,\n    name: null,\n    loading: true,\n    intervalIsSet: false,\n    idToUpdate: null,\n    messageToUpdate: null,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(course => course.json())\n      .then(res => {\n        this.setState({ course: res.course });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n  /*   // Update Course\n  updateCourse =(e)=>{\n    this.setState({\n      current: e.target.value\n    });\n  } */\n\n  // Add Course\n  addCourse = course => {\n    // post method that uses our API to create new data\n    let currentId = this.state.courses.map(course => course.id);\n    let idToBeAdded = 0;\n    while (currentId.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/addData\", {\n      id: idToBeAdded,\n      course: course\n    });\n  };\n\n  /*   e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses,\n      current: \"\"\n    });\n  }; */\n\n  /*  // delete Course\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n   \n  } */\n\n  /*  //editCourse\n  editCourse = (index,value)=> {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState = ({\n      courses\n    })\n  } */\n\n  render() {\n    let { courses } = this.state;\n    let length = courses.length;\n\n    const courseList =\n      courses.length < 0 ? (\n        courses.map(course => {\n          return (\n            <CourseList\n              details={course.name}\n              /* deleteCourse={this.deleteCourse} */\n              courses={this.state.courses}\n              /* key={index}\n            index={index}\n            editCourse={this.editCourse} */\n            />\n          );\n        })\n      ) : (\n        <p> Ther is no Course to show</p>\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          name= {this.state.name}\n          setState= {e=> this.setState({name: e.target.value})}\n          /* updateCourse={this.updateCourse} */ addCourse={this.addCourse}\n        />\n\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}