{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","react_default","a","createElement","onSubmit","addCourse","type","onChange","ahmad","required","onClick","name","CourseList","state","isEdit","courseName","id","renderCourse","className","_this","toggleState","deleteCourse","setState","updateCourseItem","e","preventDefault","editCourse","input","value","renderUpdateForm","ref","v","defaultValue","this","react","Component","App","data","idToDelete","loading","intervalIsSet","idToUpdate","nameToUpdate","current","getDataFromDB","fetch","then","json","res","catch","err","axios","post","console","log","_this2","setTimeout","interval","setInterval","_this3","courseList","length","map","components_CourseList","_id","key","components_CourseForm","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAWeA,EATI,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,WACpBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,SAAUP,EAAMQ,MAAOC,UAAQ,IAClDR,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASI,QAAS,kBAAMV,EAAMK,UAAUL,EAAMW,QAA3D,gBC2DOC,oNA7DXC,MAAO,CACHC,QAAS,EACTC,WAAY,GACZC,GAAI,MAIRC,aAAe,SAACjB,GAEZ,OACIC,EAAAC,EAAAC,cAAA,MAAIe,UAAU,YACVjB,EAAAC,EAAAC,cAAA,YAAOgB,EAAKnB,MAAMW,MAClBV,EAAAC,EAAAC,cAAA,UAAQO,QAAS,WAAKS,EAAKC,YAAYD,EAAKnB,MAAMgB,KAAME,UAAU,OAAlE,eACAjB,EAAAC,EAAAC,cAAA,UAAQe,UAAU,MAAMR,QAAS,WAAMS,EAAKnB,MAAMqB,aAAaF,EAAKnB,MAAMgB,MAA1E,cAOZI,YAAc,SAACJ,GAAO,IACbF,EAAUK,EAAKN,MAAfC,OACLK,EAAKG,SAAS,CACVR,QAASA,EACTE,GAAIA,OAMZO,iBAAmB,SAACC,GAChBA,EAAEC,iBACFN,EAAKnB,MAAM0B,WAAWP,EAAKN,MAAMG,GAAIG,EAAKQ,MAAMC,OAChDT,EAAKC,iBAITS,iBAAmB,WACf,OACE5B,EAAAC,EAAAC,cAAA,QAAMC,SAAUe,EAAKI,iBAAkBL,UAAU,OAC/CjB,EAAAC,EAAAC,cAAA,SAAO2B,IAAK,SAACC,GAAOZ,EAAKQ,MAAQI,GAAIzB,KAAK,OAAO0B,aAAcb,EAAKnB,MAAMW,OAC1EV,EAAAC,EAAAC,cAAA,0GAQC,IAEAW,EAAUmB,KAAKpB,MAAfC,OAEL,OACGb,EAAAC,EAAAC,cAAC+B,EAAA,SAAD,KACMpB,EAASmB,KAAKJ,mBAAqBI,KAAKhB,uBAzDhCkB,cC8GVC,6MArGbvB,MAAQ,CACNwB,KAAM,GACN1B,KAAM,KACN2B,WAAY,KACZC,SAAS,EACTC,eAAe,EACfC,WAAY,KACZC,aAAc,KACdC,QAAS,MAgBXC,cAAgB,WACdC,MAAM,iCACHC,KAAK,SAAAT,GAAI,OAAIA,EAAKU,SAClBD,KAAK,SAAAE,GACJ7B,EAAKG,SAAS,CAAEe,KAAMW,EAAIX,SAG3BY,MAAM,SAAAC,GAAG,OAAI/B,EAAKG,SAAS,CAAE4B,aAKlC7C,UAAY,SAAAM,GAEVwC,IAAMC,KAAK,gCAAiC,CAC1CzC,KAAMA,OAOVU,aAAe,SAACL,GACdqC,QAAQC,IAAItC,GACZmC,IAAMC,KAAK,mCAAoC,CAC7CpC,GAAIA,OAMRU,WAAa,SAACV,EAAIY,GAEhBuB,IAAMC,KAAK,mCAAoC,CACzCzC,KAAMiB,EACNZ,GAAIA,wFA/CQ,IAAAuC,EAAAtB,KAKlB,GAJAuB,WAAW,WACTD,EAAKjC,SAAS,CAAEiB,SAAS,KACxB,KACHN,KAAKW,iBACAX,KAAKpB,MAAM2B,cAAe,CAC7B,IAAIiB,EAAWC,YAAYzB,KAAKW,cAAe,KAC/CX,KAAKX,SAAS,CAAEkB,cAAeiB,sCA4C1B,IAAAE,EAAA1B,KACDI,EAASJ,KAAKpB,MAAdwB,KAGAuB,EAFOvB,EAAKwB,QAGN,EACR5D,EAAAC,EAAAC,cAAA,uCAEAkC,EAAKyB,IAAI,SAAAzB,GACP,OACEpC,EAAAC,EAAAC,cAAC4D,EAAD,CACE1C,aAAcsC,EAAKtC,aACnBK,WAAYiC,EAAKjC,WACjBf,KAAM0B,EAAK1B,KACXK,GAAIqB,EAAK2B,IACTC,IAAK5B,EAAK2B,QAMpB,OACE/D,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAC+D,EAAD,CACEvB,QAASV,KAAKpB,MAAM8B,QACpBhC,KAAMsB,KAAKpB,MAAMF,KACjBH,MAAO,SAAAgB,GAAC,OAAImC,EAAKrC,SAAS,CAAEX,KAAMa,EAAE2C,OAAOvC,SAE3CvB,UAAW4B,KAAK5B,YAElBJ,EAAAC,EAAAC,cAAA,UAAKyD,WA/FKzB,aCEEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.2d540e86.chunk.js","sourcesContent":["import React from 'react';\n\nconst CourseForm = (props)=>{\n    return (\n      <form onSubmit={props.addCourse}>\n        <input type=\"text\" onChange={props.ahmad} required />\n        <button type=\"submit\" onClick={() => props.addCourse(props.name)} >Add Course</button>\n      </form>\n    );\n}\n\nexport default CourseForm;","import React, { Component, Fragment } from 'react';\nimport \"../App.css\";\nclass CourseList extends Component {\n\n    state ={\n        isEdit : false,\n        courseName: '',\n        id: ''\n    }\n\n    // render Course\n    renderCourse = (props)=>{\n        //console.log(this.props.name)\n        return (\n            <li className=\"elements\">\n                <span>{this.props.name}</span>\n                <button onClick={()=>{this.toggleState(this.props.id)}} className=\"btn\">Edit Course</button>\n                <button className=\"btn\" onClick={()=> {this.props.deleteCourse(this.props.id)}}>Delete</button>\n            </li>      \n        )\n    }\n\n\n    // toggleState\n    toggleState = (id) => {\n        let {isEdit} = this.state;\n        this.setState({\n            isEdit: !isEdit,\n            id: id\n        })\n    }\n\n\n    // updateCourseItem\n    updateCourseItem = (e)=> {\n        e.preventDefault();\n        this.props.editCourse(this.state.id, this.input.value );\n        this.toggleState();\n    }\n\n    // render Update Form\n    renderUpdateForm = ()=>{\n        return (\n          <form onSubmit={this.updateCourseItem} className=\"btn\">\n            <input ref={(v) => {this.input = v}} type=\"text\" defaultValue={this.props.name} />\n            <button> Update Course</button>\n          </form>\n        );\n  }\n\n \n\n    \n    render() { \n\n        let {isEdit} = this.state;\n\n        return(\n           <Fragment>\n               { isEdit ? this.renderUpdateForm() : this.renderCourse()}\n           </Fragment>\n        )\n    }\n}\n \nexport default CourseList;","import React, {Component} from 'react';\nimport axios from \"axios\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nimport \"./App.css\";\n\n\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    name: null,\n    idToDelete: null,\n    loading: true,\n    intervalIsSet: false,\n    idToUpdate: null,\n    nameToUpdate: null,\n    current: \"\"\n  };\n\n  //! When a component mounts, first thing is to fetch all the existing data\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ loading: false });\n    }, 1000);\n    this.getDataFromDB();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  //! Get method to use our backend API and fetch data from DB\n  getDataFromDB = () => {\n    fetch(\"http://localhost:5000/getData\")\n      .then(data => data.json())\n      .then(res => {\n        this.setState({ data: res.data });\n      })\n      //* ALWAYS CATCH ERROR / EXCEPTIONS\n      .catch(err => this.setState({ err }));\n  };\n\n\n  // Add Course\n  addCourse = name => {\n    // post method that uses our API to create new data\n    axios.post(\"http://localhost:5000/addData\", {\n      name: name\n    });\n  };\n\n\n\n  // delete Course\n  deleteCourse = (id) => {\n    console.log(id)\n    axios.post(\"http://localhost:5000/deleteData\", {\n      id: id\n    });\n  }\n\n  \n  //editCourse\n  editCourse = (id, value) => {\n\n    axios.post(\"http://localhost:5000/updateData\", {\n          name: value,\n          id: id\n        });\n  }\n\n  render() {\n    let { data } = this.state;\n    let length = data.length;\n\n    const courseList =\n      length <= 0 ? (\n        <p> Ther is no Course to show</p>\n      ) : (\n        data.map(data => {\n          return (\n            <CourseList\n              deleteCourse={this.deleteCourse}\n              editCourse={this.editCourse}\n              name={data.name}\n              id={data._id}\n              key={data._id}\n            />\n          );\n        })\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>Add Course</h1>\n        <CourseForm\n          current={this.state.current}\n          name={this.state.name}\n          ahmad={e => this.setState({ name: e.target.value })}\n          /* updateCourse={this.updateCourse} */\n          addCourse={this.addCourse}\n        />\n        <ul>{courseList}</ul>\n      </div>\n    );\n  }\n}\n\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}